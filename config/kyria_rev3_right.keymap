/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */
&kscan0 {
    row-gpios
    = <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&pro_micro 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    , <&pro_micro 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    ;
    col-gpios
    = <&pro_micro 16 GPIO_ACTIVE_HIGH>
    , <&pro_micro 4  GPIO_ACTIVE_HIGH>
    , <&pro_micro 5  GPIO_ACTIVE_HIGH>
    , <&gpio1 7 GPIO_ACTIVE_HIGH>
    , <&pro_micro 7  GPIO_ACTIVE_HIGH>
    , <&pro_micro 8  GPIO_ACTIVE_HIGH>
    , <&pro_micro 10 GPIO_ACTIVE_HIGH>
    ;
};
nice_view_spi: &spi0 {
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 1 GPIO_ACTIVE_HIGH>;
};

#define DEFAULT 0
#define SIFFROR 1
#define CODING  2
#define NAVI    3
#define FUNC    4

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        layer1behavior: layerbehavior {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&mo 1>, <&macro_tap>, <&to 1>;

            label = "LAYERBEHAVIOR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp ESC                &kp K  &kp M  &kp D      &kp F      &kp B                                                          &kp COMMA      &kp SQT  &kp I     &kp L  &kp Y     &kp BSLH
&mt LCTRL PRINTSCREEN  &kp G  &kp T  &kp S      &kp N      &kp P                                                          &kp SEMI       &kp A    &kp E     &kp R  &kp BSLH  &kp W
&mt LALT TAB           &kp X  &kp V  &kp C      &kp H      &kp Z         &to 0       &layer1behavior  &to 2      &to 3    &kp DOT        &kp O    &kp U     &kp J  &kp FSLH  &kp Q
                                     &kp TILDE  &kp LCTRL  &kp LEFT_ALT  &kp LSHIFT  &kp LGUI         &kp SPACE  &kp RET  &kp BACKSPACE  &to 4    &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        SIFFROR {
            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                                   &kp N6     &kp N7  &kp N8  &kp N9  &kp N0           &trans
&kp F1   &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                                   &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp PLUS         &kp MINUS
&kp F7   &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &kp N0     &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &kp KP_DIVIDE
                         &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans     &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        CODING {
            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                                   &kp N6     &kp N7  &kp N8  &kp N9  &kp N0           &trans
&kp F1   &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                                   &kp EQUAL  &kp N4  &kp N5  &kp N6  &trans           &kp MINUS
&kp F7   &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &kp N0     &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &kp KP_DIVIDE
                         &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans     &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        NAVI {
            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                                   &kp N6     &kp N7  &kp N8  &kp N9  &kp N0           &trans
&kp F1   &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                                   &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp PLUS         &kp MINUS
&kp F7   &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &kp N0     &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &kp KP_DIVIDE
                         &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans     &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        FUNC {
            bindings = <
&trans       &bt BT_CLR    &bl BL_TOG  &kp K_REFRESH  &kp C_PLAY_PAUSE  &kp C_MUTE                                    &trans  &trans  &trans  &trans  &trans  &trans
&sys_reset   &bt BT_SEL 0  &bl BL_INC  &kp K_FORWARD  &kp K_NEXT        &kp C_VOL_UP                                  &trans  &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &bt BT_SEL 1  &bl BL_DEC  &kp K_BACK     &kp K_PREV        &kp C_VOL_DN  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &bootloader
                                       &trans         &trans            &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};

